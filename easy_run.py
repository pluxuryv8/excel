#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
EASY RUN - –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Excel Analytics
–ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç!
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import os
import sys
import subprocess
import tempfile
from pathlib import Path

class ExcelAnalyticsGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üìä Excel Analytics PRO - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á—ë—Ç–æ–≤")
        self.root.geometry("800x600")
        
        # –°—Ç–∏–ª—å
        style = ttk.Style()
        style.theme_use('clam')
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="Excel Analytics PRO", 
                               font=('Arial', 20, 'bold'))
        title_label.grid(row=0, column=0, columnspan=3, pady=10)
        
        subtitle_label = ttk.Label(main_frame, 
                                  text="–í—Å—Ç–∞–≤—å –¥–∞–Ω–Ω—ã–µ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ (‚Ññ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ) –∏ –ø–æ–ª—É—á–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç!",
                                  font=('Arial', 10))
        subtitle_label.grid(row=1, column=0, columnspan=3, pady=5)
        
        # –¢–∞–±—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤—ã–±–æ—Ä–æ–∫
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=10)
        
        # –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
        self.tabs = []
        self.add_data_tab("–í—ã–±–æ—Ä–∫–∞ 1")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∞–º–∏
        tab_frame = ttk.Frame(main_frame)
        tab_frame.grid(row=3, column=0, columnspan=3, pady=5)
        
        ttk.Button(tab_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä–∫—É", 
                  command=self.add_tab).grid(row=0, column=0, padx=5)
        ttk.Button(tab_frame, text="‚ûñ –£–¥–∞–ª–∏—Ç—å –≤—ã–±–æ—Ä–∫—É", 
                  command=self.remove_tab).grid(row=0, column=1, padx=5)
        
        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        ttk.Label(main_frame, text="–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:").grid(row=4, column=0, sticky=tk.W, pady=10)
        
        self.output_path = tk.StringVar(value=str(Path.home() / "Desktop"))
        output_entry = ttk.Entry(main_frame, textvariable=self.output_path, width=50)
        output_entry.grid(row=4, column=1, padx=5)
        
        ttk.Button(main_frame, text="üìÅ –í—ã–±—Ä–∞—Ç—å", 
                  command=self.choose_folder).grid(row=4, column=2)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_frame = ttk.Frame(main_frame)
        action_frame.grid(row=5, column=0, columnspan=3, pady=20)
        
        self.generate_btn = ttk.Button(action_frame, text="üöÄ –°–û–ó–î–ê–¢–¨ –û–¢–ß–Å–¢", 
                                      command=self.generate_report,
                                      style='Accent.TButton')
        self.generate_btn.grid(row=0, column=0, padx=10)
        
        ttk.Button(action_frame, text="üìã –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö", 
                  command=self.show_example).grid(row=0, column=1, padx=10)
        
        ttk.Button(action_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", 
                  command=self.clear_all).grid(row=0, column=2, padx=10)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_label = ttk.Label(main_frame, textvariable=self.status_var, 
                                relief=tk.SUNKEN, anchor=tk.W)
        status_label.grid(row=6, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        root.columnconfigure(0, weight=1)
        root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(2, weight=1)
        
        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏
        style.configure('Accent.TButton', font=('Arial', 12, 'bold'))
    
    def add_data_tab(self, name):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö"""
        tab_frame = ttk.Frame(self.notebook)
        self.notebook.add(tab_frame, text=name)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        text_widget = scrolledtext.ScrolledText(tab_frame, width=60, height=20, 
                                               font=('Courier', 10))
        text_widget.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        text_widget.insert('1.0', "# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n# ‚Ññ <tab –∏–ª–∏ –ø—Ä–æ–±–µ–ª> –∑–Ω–∞—á–µ–Ω–∏–µ\n\n1\t12.45\n2\t15.67\n3\t14.23\n4\t13.89\n5\t15.12\n")
        
        self.tabs.append({
            'frame': tab_frame,
            'text': text_widget,
            'name': name
        })
    
    def add_tab(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É"""
        num = len(self.tabs) + 1
        self.add_data_tab(f"–í—ã–±–æ—Ä–∫–∞ {num}")
        self.notebook.select(len(self.tabs) - 1)
    
    def remove_tab(self):
        """–£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É"""
        if len(self.tabs) > 1:
            current = self.notebook.index(self.notebook.select())
            self.notebook.forget(current)
            self.tabs.pop(current)
        else:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–î–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –≤—ã–±–æ—Ä–∫–∞!")
    
    def choose_folder(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        folder = filedialog.askdirectory(initialdir=self.output_path.get())
        if folder:
            self.output_path.set(folder)
    
    def show_example(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö"""
        example = """–ü–†–ò–ú–ï–† –î–ê–ù–ù–´–•:

–§–æ—Ä–º–∞—Ç: –Ω–æ–º–µ—Ä <–ø—Ä–æ–±–µ–ª –∏–ª–∏ tab> –∑–Ω–∞—á–µ–Ω–∏–µ

1    100.71
2    100.56  
3    98.97
4    100.63
5    100.58
6    100.87
7    100.78
8    102.51
9    99.97
10   101.11

–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
- –¢–æ—á–∫—É –∏–ª–∏ –∑–∞–ø—è—Ç—É—é –¥–ª—è –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏
- –ü—Ä–æ–±–µ–ª –∏–ª–∏ —Ç–∞–±—É–ª—è—Ü–∏—é –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å #"""
        
        messagebox.showinfo("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö", example)
    
    def clear_all(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?"):
            for tab in self.tabs:
                tab['text'].delete('1.0', tk.END)
            self.status_var.set("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç"""
        try:
            self.status_var.set("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            self.generate_btn.config(state='disabled')
            
            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤—ã–±–æ—Ä–∫–∏
            temp_files = []
            
            for i, tab in enumerate(self.tabs):
                data = tab['text'].get('1.0', tk.END).strip()
                if not data or data.startswith("# –í—Å—Ç–∞–≤—å —Å—é–¥–∞"):
                    continue
                
                # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.txt', 
                                                       delete=False, encoding='utf-8')
                temp_file.write(data)
                temp_file.close()
                temp_files.append(temp_file.name)
            
            if not temp_files:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
                return
            
            self.status_var.set(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(temp_files)} –≤—ã–±–æ—Ä–æ–∫...")
            
            # –ü—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–∫—Ä–∏–ø—Ç—É
            script_path = os.path.join(os.path.dirname(__file__), 'report.py')
            
            # –ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            output_dir = os.path.join(self.output_path.get(), 'Excel_Report')
            os.makedirs(output_dir, exist_ok=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
            cmd = [sys.executable, script_path] + temp_files
            
            # –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞
            original_dir = os.getcwd()
            os.chdir(self.output_path.get())
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            os.chdir(original_dir)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for f in temp_files:
                try:
                    os.unlink(f)
                except:
                    pass
            
            if result.returncode == 0:
                self.status_var.set("‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                output_file = os.path.join(self.output_path.get(), 'out', 'report_pro.xlsx')
                
                message = f"–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n–§–∞–π–ª: {output_file}\n\n–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –æ—Ç—á—ë—Ç–æ–º?"
                
                if messagebox.askyesno("–£—Å–ø–µ—Ö!", message):
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    if sys.platform == 'win32':
                        os.startfile(os.path.dirname(output_file))
                    elif sys.platform == 'darwin':
                        subprocess.run(['open', os.path.dirname(output_file)])
                    else:
                        subprocess.run(['xdg-open', os.path.dirname(output_file)])
            else:
                self.status_var.set("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞:\n\n{result.stderr}")
                
        except Exception as e:
            self.status_var.set("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n\n{str(e)}")
        finally:
            self.generate_btn.config(state='normal')


def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    script_path = os.path.join(os.path.dirname(__file__), 'report.py')
    if not os.path.exists(script_path):
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª report.py!\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ easy_run.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ report.py")
        return
    
    root = tk.Tk()
    app = ExcelAnalyticsGUI(root)
    root.mainloop()


if __name__ == '__main__':
    main()
